#include <Arduino.h>
#if defined(ESP32) || defined(ARDUINO_RASPBERRY_PI_PICO_W)
#include <WiFi.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#endif

#include <FirebaseClient.h>
#include <WiFiClientSecure.h>

#define WIFI_SSID "UW MPSK"
#define WIFI_PASSWORD "/=6j3Rq[gn" // Replace with your network password

#define DATABASE_SECRET "AIzaSyD9yMonhiXKwcbI7u74l3Ug-yXOW5-RyL4" // Replace with your database URL
#define DATABASE_URL "https://esp32-firebase-demo-97ac4-default-rtdb.firebaseio.com/test" // Replace with your API key

#define STAGE_INTERVAL 10000 // 10 seconds each stage
#define MAX_WIFI_RETRIES 5 // Maximum number of WiFi connection retries

WiFiClientSecure ssl;
DefaultNetwork network;
AsyncClientClass client(ssl, getNetwork(network));

FirebaseApp app;
RealtimeDatabase Database;
AsyncResult result;
LegacyToken dbSecret(DATABASE_SECRET);

int uploadInterval = 5000; // 
unsigned long sendDataPrevMillis = 0;
int count = 0;

// HC-SR04 Pins
const int trigPin = 18;
const int echoPin = 19;

// Define sound speed in cm/usec
const float soundSpeed = 0.034;

// Functions
float measureDistance();
void connectToWiFi();
void initFirebase();
void sendDataToFirebase(float distance);

void printError(int code, const String &msg)
{
    Firebase.printf("Error, msg: %s, code: %d\n", msg.c_str(), code);
}

void setup() {
  Serial.begin(115200);
  delay(500);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // Stage 1: Idle for 10 seconds
  Serial.println("Running for 10 seconds without doing anything...");
  unsigned long startTime = millis();
  while (millis() - startTime < STAGE_INTERVAL) {
    delay(100);
  }

  // Stage 2: Ultrasonic sensor only
  Serial.println("Measuring distance for 10 seconds...");
  startTime = millis();
  while (millis() - startTime < STAGE_INTERVAL) {
    measureDistance();
    delay(100);
  }

  // Stage 3: WiFi and ultrasonic sensor
  Serial.println("Turning on WiFi and measuring for 10 seconds...");
  connectToWiFi();
  startTime = millis();
  while (millis() - startTime < STAGE_INTERVAL) {
    measureDistance();
    delay(100);
  }

  // Stage 4: Firebase and sending data
  Serial.println("Turning on Firebase and sending data every 5 seconds...");
  initFirebase();
  startTime = millis();
  while (millis() - startTime < STAGE_INTERVAL) {
    float currentDistance = measureDistance();
    sendDataToFirebase(currentDistance);
    delay(100);
  }

  // Deep sleep for 35 seconds
  Serial.println("Going to deep sleep for 35 seconds...");
  WiFi.disconnect();
  esp_sleep_enable_timer_wakeup(35000000); // 35 seconds in microseconds
  esp_deep_sleep_start();
}

void loop() {
  // Not used
}

float measureDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  float distance = duration * soundSpeed / 2;

  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  return distance;
}

void connectToWiFi() {
  Serial.println(WiFi.macAddress());
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.println("Connecting to WiFi");
  int wifiCnt = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    wifiCnt++;
    if (wifiCnt > MAX_WIFI_RETRIES) {
      Serial.println("WiFi connection failed");
      ESP.restart();
    }
  }
  Serial.println("Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void initFirebase() {
  Firebase.printf("Firebase Client v%s\n", FIREBASE_CLIENT_VERSION);

  ssl.setInsecure();
#if defined(ESP8266)
  ssl.setBufferSizes(1024, 1024);
#endif

  Serial.println("Initializing the app...");
  initializeApp(client, app, getAuth(dbSecret));

  app.getApp<RealtimeDatabase>(Database);
  Database.url(DATABASE_URL);

  client.setAsyncResult(result);
}

void sendDataToFirebase(float distance) {
  if (millis() - sendDataPrevMillis > uploadInterval || sendDataPrevMillis == 0) {
    sendDataPrevMillis = millis();

    Serial.print("Pushing the float value... ");
    String name = Database.push<number_t>(client, "/test/distance", number_t(distance));
    if (client.lastError().code() == 0) {
      Firebase.printf("ok, name: %s\n", name.c_str());
      count++;
    }
  }
}
